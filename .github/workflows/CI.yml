name: CI
env:
  DEBUG: napi:*
  APP_NAME: oxc-node
  OXC_LOG: 'debug'
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CC: clang
  CARGO_INCREMENTAL: '1'
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Lint
        run: pnpm lint
      - name: Cargo fmt
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Prettier
        run: pnpm prettier -c .
      - name: Toml
        run: pnpm taplo fmt --check

  build-cli:
    name: Build CLI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: pnpm --filter="@oxc-node/cli" build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli
          path: ./packages/cli/dist

  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: pnpm --filter=@oxc-node/core build --target x86_64-apple-darwin
          - host: windows-latest
            build: pnpm --filter=@oxc-node/core build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: pnpm --filter=@oxc-node/core build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: pnpm --filter=@oxc-node/core build --target x86_64-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: pnpm --filter=@oxc-node/core build --target x86_64-unknown-linux-musl -x
          - host: macos-latest
            target: aarch64-apple-darwin
            build: pnpm --filter=@oxc-node/core build --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: pnpm --filter=@oxc-node/core build --target aarch64-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: pnpm --filter=@oxc-node/core build --target armv7-unknown-linux-gnueabihf --use-napi-cross
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: pnpm --filter=@oxc-node/core build --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: pnpm --filter=@oxc-node/core build --target armv7-linux-androideabi
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: pnpm --filter=@oxc-node/core build --target aarch64-unknown-linux-musl -x
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm --filter=@oxc-node/core build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: powerpc64le-unknown-linux-gnu
            build: |
              export CC=clang
              pnpm --filter=@oxc-node/core build --target powerpc64le-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-latest
            target: s390x-unknown-linux-gnu
            build: |
              export CC=clang
              pnpm --filter=@oxc-node/core build --target s390x-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-latest
            target: wasm32-wasip1-threads
            build: pnpm --filter=@oxc-node/core build --target wasm32-wasip1-threads
    name: stable - ${{ matrix.settings.target }} - node@22
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref_name == 'main' }}
          shared-key: ${{ matrix.settings.target }}-${{ matrix.settings.host }}
      - name: Cache cross toolchain
        uses: actions/cache@v4
        with:
          path: ~/.napi-rs
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.13.0
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: pnpm install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 22
          cache: pnpm
          architecture: x86
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            ./packages/core/*.node
            ./packages/core/*.wasm
          if-no-files-found: error

  build-freebsd:
    name: Build FreeBSD
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build
        id: build
        uses: cross-platform-actions/action@v0.26.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: '14.2'
          memory: 8G
          cpu_count: 3
          environment_variables: 'DEBUG RUSTUP_IO_THREADS'
          shell: bash
          run: |
            sudo pkg install -y -f curl node libnghttp2 npm
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
            source "$HOME/.cargo/env"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            pwd
            ls -lah
            whoami
            env
            sudo corepack enable
            pnpm install
            pnpm --filter=@oxc-node/core build --target x86_64-unknown-freebsd
            rm -rf node_modules
            rm -rf target
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-x86_64-unknown-freebsd
          path: ./packages/core/*.node
          if-no-files-found: error

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }} - transform all@${{ matrix.transform_all }}
    needs:
      - build
      - build-cli
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
        node:
          - '18'
          - '20'
          - '22'
        transform_all:
          - 'true'
          - 'false'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          architecture: ${{ matrix.settings.architecture }}
      - uses: actions/download-artifact@v4
        with:
          name: cli
          path: ./packages/cli/dist
      - name: Install dependencies
        run: pnpm install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ./packages/core
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: pnpm test
        env:
          OXC_TRANSFORM_ALL: ${{ matrix.transform_all }}
  test-linux-binding:
    name: Test ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
      - build-cli
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-gnueabihf
          - s390x-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu
        node:
          - '18'
          - '20'
          - '22'
        exclude:
          # too slow
          - target: aarch64-unknown-linux-gnu
            node: '18'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else if ('${{ matrix.target }}'.startsWith('powerpc64le')) {
              console.log('PLATFORM=linux/ppc64le')
            } else if ('${{ matrix.target }}'.startsWith('s390x')) {
              console.log('PLATFORM=linux/s390x')
            } else if ('${{ matrix.target }}'.startsWith('powerpc64le')) {
              console.log('PLATFORM=linux/ppc64le')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
          echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      - uses: actions/download-artifact@v4
        with:
          name: cli
          path: ./packages/cli/dist
      # use --force to download the all platform/arch dependencies
      - name: Install dependencies
        run: pnpm install --force
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: ./packages/core
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: -v ${{ steps.docker.outputs.PNPM_STORE_PATH }}:${{ steps.docker.outputs.PNPM_STORE_PATH }} -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}
          run: corepack enable && pnpm test
  test-wasi:
    name: Test WASI target
    needs:
      - build
      - build-cli
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
      - uses: actions/download-artifact@v4
        with:
          name: cli
          path: ./packages/cli/dist
      - name: Install dependencies
        run: pnpm install --force
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-wasm32-wasip1-threads
          path: ./packages/core
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: pnpm test
        env:
          NAPI_RS_FORCE_WASI: 1
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - lint
      - test-macOS-windows-binding
      - test-linux-binding
      - build-freebsd
      - test-wasi
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: create npm dirs
        run: |
          pnpm napi create-npm-dirs --package-json-path packages/core/package.json
          pnpm napi artifacts --package-json-path packages/core/package.json --build-output-dir packages/core
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - uses: actions/download-artifact@v4
        with:
          name: cli
          path: ./packages/cli/dist
      - name: Publish
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            pnpm napi pre-publish -t npm --package-json-path packages/core/package.json
            pnpm publish -r --access public --no-git-checks
          elif git log -1 --pretty=%B | grep "^v\?[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            pnpm napi pre-publish -t npm --package-json-path packages/core/package.json
            pnpm -r publish --tag next --access public --no-git-checks
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
