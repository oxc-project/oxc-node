/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const __nodeFs = require('node:fs')
const __nodePath = require('node:path')
const { WASI: __nodeWASI } = require('node:wasi')
const { Worker } = require('node:worker_threads')

const {
  instantiateNapiModuleSync: __emnapiInstantiateNapiModuleSync,
  getDefaultContext: __emnapiGetDefaultContext,
  createOnMessage: __wasmCreateOnMessageForFsProxy,
} = require('@napi-rs/wasm-runtime')

const __rootDir = __nodePath.parse(process.cwd()).root

const __wasi = new __nodeWASI({
  version: 'preview1',
  env: process.env,
  preopens: {
    [__rootDir]: __rootDir,
  }
})

const __emnapiContext = __emnapiGetDefaultContext()

const __sharedMemory = new WebAssembly.Memory({
  initial: 4000,
  maximum: 65536,
  shared: true,
})

let __wasmFilePath = __nodePath.join(__dirname, 'oxc-node.wasm32-wasi.wasm')
const __wasmDebugFilePath = __nodePath.join(__dirname, 'oxc-node.wasm32-wasi.debug.wasm')

if (__nodeFs.existsSync(__wasmDebugFilePath)) {
  __wasmFilePath = __wasmDebugFilePath
} else if (!__nodeFs.existsSync(__wasmFilePath)) {
  try {
    __wasmFilePath = __nodePath.resolve('@oxc-node/core-wasm32-wasi')
  } catch {
    throw new Error('Cannot find oxc-node.wasm32-wasi.wasm file, and @oxc-node/core-wasm32-wasi package is not installed.')
  }
}

const { instance: __napiInstance, module: __wasiModule, napiModule: __napiModule } = __emnapiInstantiateNapiModuleSync(__nodeFs.readFileSync(__wasmFilePath), {
  context: __emnapiContext,
  asyncWorkPoolSize: (function() {
    const threadsSizeFromEnv = Number(process.env.NAPI_RS_ASYNC_WORK_POOL_SIZE ?? process.env.UV_THREADPOOL_SIZE)
    // NaN > 0 is false
    if (threadsSizeFromEnv > 0) {
      return threadsSizeFromEnv
    } else {
      return 4
    }
  })(),
  reuseWorker: true,
  wasi: __wasi,
  onCreateWorker() {
    const worker = new Worker(__nodePath.join(__dirname, 'wasi-worker.mjs'), {
      env: process.env,
    })
    worker.onmessage = ({ data }) => {
      __wasmCreateOnMessageForFsProxy(__nodeFs)(data)
    }
    return worker
  },
  overwriteImports(importObject) {
    importObject.env = {
      ...importObject.env,
      ...importObject.napi,
      ...importObject.emnapi,
      memory: __sharedMemory,
    }
    return importObject
  },
  beforeInit({ instance }) {
    __napi_rs_initialize_modules(instance)
  }
})

function __napi_rs_initialize_modules(__napiInstance) {
  __napiInstance.exports['__napi_register__init_tracing_0']?.()
  __napiInstance.exports['__napi_register__Output_struct_1']?.()
  __napiInstance.exports['__napi_register__Output_impl_4']?.()
  __napiInstance.exports['__napi_register__transform_5']?.()
  __napiInstance.exports['__napi_register__TransformTask_impl_6']?.()
  __napiInstance.exports['__napi_register__transform_async_7']?.()
  __napiInstance.exports['__napi_register__ResolveContext_struct_8']?.()
  __napiInstance.exports['__napi_register__ResolveFnOutput_struct_9']?.()
  __napiInstance.exports['__napi_register__OxcResolveOptions_struct_10']?.()
  __napiInstance.exports['__napi_register__create_resolve_11']?.()
  __napiInstance.exports['__napi_register__LoadContext_struct_12']?.()
  __napiInstance.exports['__napi_register__LoadFnOutput_struct_13']?.()
  __napiInstance.exports['__napi_register__load_14']?.()
}
module.exports.Output = __napiModule.exports.Output
module.exports.createResolve = __napiModule.exports.createResolve
module.exports.initTracing = __napiModule.exports.initTracing
module.exports.load = __napiModule.exports.load
module.exports.transform = __napiModule.exports.transform
module.exports.transformAsync = __napiModule.exports.transformAsync
